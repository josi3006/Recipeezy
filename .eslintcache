[{"C:\\Users\\John\\git\\Recipeezy\\src\\index.js":"1","C:\\Users\\John\\git\\Recipeezy\\src\\App.js":"2","C:\\Users\\John\\git\\Recipeezy\\src\\reportWebVitals.js":"3","C:\\Users\\John\\git\\Recipeezy\\src\\components\\ingredientsComponent.js":"4","C:\\Users\\John\\git\\Recipeezy\\src\\components\\searchComponent.js":"5","C:\\Users\\John\\git\\Recipeezy\\src\\components\\stepsComponent.js":"6","C:\\Users\\John\\git\\Recipeezy\\src\\components\\navComponent.js":"7"},{"size":417,"mtime":1615411515106,"results":"8","hashOfConfig":"9"},{"size":740,"mtime":1615045839908,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":610,"mtime":1614718948190,"results":"12","hashOfConfig":"9"},{"size":6454,"mtime":1615669209795,"results":"13","hashOfConfig":"9"},{"size":1065,"mtime":1615670470761,"results":"14","hashOfConfig":"9"},{"size":998,"mtime":1615586453189,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"9kneol",{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\John\\git\\Recipeezy\\src\\index.js",[],["35","36"],"C:\\Users\\John\\git\\Recipeezy\\src\\App.js",["37","38","39","40"],"import './App.css';\nimport {\n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom';\nimport SearchPage from './components/searchComponent.js';\nimport IngredientsPage from './components/ingredientsComponent.js';\nimport StepsPage from './components/stepsComponent';\nrequire('dotenv').config();\n\n\n\n\nfunction App() {\n  return (\n\n\n    <div className=\"App\">\n\n      <SearchPage />\n\n{/* \n      <Router>\n\n\n        <Route\n          path=\"/\"\n          component={SearchPage}\n          exact\n        />\n\n\n        <Route\n          path=\"/ingredients\"\n          component={IngredientsPage}\n        />\n\n        <Route\n          path=\"/steps\"\n          component={StepsPage}\n        />\n\n      </Router> */}\n\n\n    </div>\n\n\n  );\n}\n\nexport default App;\n","C:\\Users\\John\\git\\Recipeezy\\src\\reportWebVitals.js",[],"C:\\Users\\John\\git\\Recipeezy\\src\\components\\ingredientsComponent.js",["41"],"// import logo from './logo.svg';\r\n// import './App.css';\r\nimport React, { useEffect } from \"react\";\r\n\r\n\r\nfunction IngredientsPage(props) {\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"contentdiv\">\r\n\r\n      <ul>\r\n        {Object.keys(props.recipeIngredients).map((key) => {\r\n          const recipeIngredient = props.recipeIngredients[key];\r\n          return (\r\n            <>\r\n              <li key={toString(recipeIngredient.index + recipeIngredient.id)}>{recipeIngredient.originalString}</li><hr />\r\n            </>\r\n          );\r\n        })}\r\n      </ul>\r\n\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default IngredientsPage;","C:\\Users\\John\\git\\Recipeezy\\src\\components\\searchComponent.js",["42"],"import Navbar from './navComponent';\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport StepsPage from './stepsComponent';\r\nimport IngredientsPage from './ingredientsComponent';\r\n\r\nrequire('dotenv').config();\r\n\r\n\r\n\r\nconst SearchPage = () => {\r\n\r\n    const [searchTerms, setSearchTerms] = useState(\"\");\r\n    const [hitList, setHitList] = useState([\"\"]);\r\n    const [clickedID, setClickedID] = useState(\"\");\r\n    const [recipeIngredients, setRecipeIngredients] = useState([\"\"]);\r\n    const [recipeSteps, setRecipeSteps] = useState([\"\"]);\r\n    const [showSearchBar, setShowSearchBar] = useState(true);\r\n    const [showHitList, setShowHitList] = useState(false);\r\n    const [showRecipeSteps, setShowRecipeSteps] = useState(false);\r\n    const [showIngredientList, setShowIngredientList] = useState(false);\r\n    const [showHitListIcon, setShowHitListIcon] = useState(false);\r\n    const [showIngredientListIcon, setShowIngredientListIcon] = useState(false);\r\n    const [showRecipeStepsIcon, setShowRecipeStepsIcon] = useState(false);\r\n\r\n\r\n\r\n    // Navigation functions triggered by button clicks\r\n\r\n    const searchButton = () => {\r\n        setShowHitListIcon(true);\r\n        makeTheCall();\r\n        setShowSearchBar(false);\r\n        setShowHitList(true);\r\n    };\r\n\r\n    const hitItemClicked = () => {\r\n        getRecipeData();\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        hitItemClicked();\r\n    }, [clickedID]);\r\n\r\n    const reShowHitListButton = () => {\r\n        setShowIngredientList(false);\r\n        setShowRecipeSteps(false);\r\n        setShowHitList(true);\r\n    };\r\n\r\n    const showIngredientsButton = () => {\r\n        setShowHitList(false);\r\n        setShowRecipeSteps(false);\r\n        setShowSearchBar(false);\r\n        setShowIngredientList(true);\r\n    };\r\n\r\n    const showRecipeStepsButton = () => {\r\n        setShowHitList(false);\r\n        setShowIngredientList(false);\r\n        setShowSearchBar(false);\r\n        setShowRecipeSteps(true);\r\n    };\r\n\r\n    const resetEverythingButton = () => {\r\n        window.location.reload();\r\n    };\r\n\r\n\r\n\r\n    // Options to SEARCH the API for recipes\r\n    const searchOptions = {\r\n        method: 'GET',\r\n        url: 'https://webknox-recipes.p.rapidapi.com/recipes/search',\r\n        params: {\r\n            query: searchTerms,\r\n        },\r\n        headers: {\r\n            'x-rapidapi-key': process.env.REACT_APP_API_key,\r\n            'x-rapidapi-host': 'webknox-recipes.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n\r\n    // Options to Get recipe data after choosing a recipe\r\n    const recipeDataCall = {\r\n        method: 'GET',\r\n        url: 'https://webknox-recipes.p.rapidapi.com/recipes/' + clickedID + '/information',\r\n        headers: {\r\n            'x-rapidapi-key': process.env.REACT_APP_API_key,\r\n            'x-rapidapi-host': 'webknox-recipes.p.rapidapi.com'\r\n        }\r\n    };\r\n\r\n\r\n    // API call to get data for our chosen recipe\r\n    const getRecipeData = () => {\r\n        axios.request(recipeDataCall)\r\n            .then((response) => {\r\n                setShowIngredientListIcon(true);\r\n                setShowRecipeStepsIcon(true);\r\n                setRecipeIngredients(response.data.extendedIngredients);\r\n                setRecipeSteps(response.data.analyzedInstructions[0].steps);\r\n                setShowHitList(false);\r\n                setShowIngredientList(true);\r\n                setShowRecipeSteps(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    // API call to search all recipes\r\n    const makeTheCall = () => {\r\n        axios.request(searchOptions)\r\n            .then((response) => {\r\n                setHitList(response.data.results);\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n        <div>\r\n\r\n\r\n            <Navbar\r\n                showHitListIcon={showHitListIcon}\r\n                showIngredientListIcon={showIngredientListIcon}\r\n                showRecipeStepsIcon={showRecipeStepsIcon}\r\n                reShowHitListButton={reShowHitListButton}\r\n                showIngredientsButton={showIngredientsButton}\r\n                showRecipeStepsButton={showRecipeStepsButton}\r\n                resetEverythingButton={resetEverythingButton} />\r\n\r\n\r\n\r\n\r\n            {/* This maps SEARCH HIT list to page */}\r\n            { showHitList ?\r\n                <div className=\"contentdiv\">\r\n                    <ul>\r\n                        {Object.keys(hitList).map((key) => {\r\n                            const hitItem = hitList[key];\r\n                            return (\r\n                                <div key={hitItem.id}>\r\n\r\n\r\n                                    <li onClick={() => setClickedID(hitItem.id)}>\r\n                                        {hitItem.title}<br />\r\n                                        <p className=\"urltext\">{hitItem.sourceUrl}</p>\r\n                                    </li>\r\n\r\n\r\n\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </ul></div> : null}\r\n\r\n\r\n            {/* This maps recipe INGREDIENTS list to page */}\r\n            {showIngredientList ? <IngredientsPage recipeIngredients={recipeIngredients} /> : null}\r\n\r\n\r\n            {/* This maps recipe STEPS list to page */}\r\n            {showRecipeSteps ? <StepsPage \r\n                            showRecipeStepsIcon={showRecipeStepsIcon}\r\n                            recipeSteps={recipeSteps} /> : null}\r\n\r\n\r\n            {/* This is the search form */}\r\n            {showSearchBar ?\r\n                <form>\r\n\r\n                    <div className='form-group'>\r\n                        <input\r\n                            className='form-control textinput'\r\n                            placeholder='Search'\r\n                            onChange={(event) => setSearchTerms(event.currentTarget.value)}\r\n                            name='searchterms'\r\n                            id='searchtermsbox'\r\n                            value={searchTerms}\r\n                            aria-label='Enter Search Terms Here'\r\n                        />\r\n                    </div>\r\n\r\n\r\n                    <div\r\n                        className=\"buttondiv\"\r\n                        onClick={searchButton}>Search\r\n                    </div>\r\n\r\n                </form> : null}\r\n\r\n\r\n\r\n        </div >\r\n\r\n    );\r\n}\r\n\r\nexport default SearchPage;","C:\\Users\\John\\git\\Recipeezy\\src\\components\\stepsComponent.js",[],"C:\\Users\\John\\git\\Recipeezy\\src\\components\\navComponent.js",[],["43","44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":3,"column":20,"nodeType":"51","messageId":"52","endLine":3,"endColumn":26},{"ruleId":"49","severity":1,"message":"53","line":4,"column":3,"nodeType":"51","messageId":"52","endLine":4,"endColumn":8},{"ruleId":"49","severity":1,"message":"54","line":7,"column":8,"nodeType":"51","messageId":"52","endLine":7,"endColumn":23},{"ruleId":"49","severity":1,"message":"55","line":8,"column":8,"nodeType":"51","messageId":"52","endLine":8,"endColumn":17},{"ruleId":"49","severity":1,"message":"56","line":3,"column":17,"nodeType":"51","messageId":"52","endLine":3,"endColumn":26},{"ruleId":"57","severity":1,"message":"58","line":45,"column":8,"nodeType":"59","endLine":45,"endColumn":19,"suggestions":"60"},{"ruleId":"45","replacedBy":"61"},{"ruleId":"47","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'IngredientsPage' is defined but never used.","'StepsPage' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'hitItemClicked'. Either include it or remove the dependency array.","ArrayExpression",["65"],["63"],["64"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [clickedID, hitItemClicked]",{"range":"68","text":"69"},[1431,1442],"[clickedID, hitItemClicked]"]